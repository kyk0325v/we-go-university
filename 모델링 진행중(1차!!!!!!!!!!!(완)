{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"모델링 진행중(1차!!!!!!!!!!!(완)","private_outputs":true,"provenance":[],"collapsed_sections":[],"machine_shape":"hm","mount_file_id":"1SobHQYl_30OdDFRRgVZzxZiFUFSjR5ZY","authorship_tag":"ABX9TyMeALPgDZBxxbxXn91W6RFi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"6bQjCdPxI8D3"},"source":["from __future__ import print_function\n","#%matplotlib inline\n","import argparse\n","import os\n","import random\n","import torch\n","import torch.nn as nn\n","import torch.nn.parallel\n","import torch.backends.cudnn as cudnn\n","import torch.optim as optim\n","import torch.utils.data\n","import torchvision.datasets as dset\n","import torchvision.transforms as transforms\n","import torchvision.utils as vutils\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import matplotlib.animation as animation\n","from IPython.display import HTML\n","\n","# Set random seed for reproducibility\n","manualSeed = 999\n","#manualSeed = random.randint(1, 10000) # use if you want new results\n","print(\"Random Seed: \", manualSeed)\n","random.seed(manualSeed)\n","torch.manual_seed(manualSeed)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"up39zgwVI8GE"},"source":["dataroot = '/content/j_image'  #  데이터세트 폴더의 루트 경로\n","workers = 2   # Dataloader를 이용해 데이터를 로드하기 위해 사용되는 스레드 수\n","batch_size = 128  # 학습에서 사용되는 배치 크기. 논문에서는 128.\n","image_size = 64  # 학습에서 사용되는 이미지 크기. (모든 이미지가 이 사이즈에 맞게 resize 된다.) 디폴트 값은 64\n","nc = 3  # 인풋 이미지의 색상 채널 수. 컬러 이미지는 이 값이 3이다. (*흑백 이미지의 경우 1)\n","nz = 100  # 잠재 벡터의 길이(크기)\n","ngf = 64  #Generator를 거치는 피쳐 맵의 크기\n","ndf = 64  #Discriminator를 거치는 피쳐 맵의 크기\n","num_epochs = 15  # training epoch의 수. 오랜 시간 학습하는 것이 더 좋은 결과를 낳지만, 더 오랜 시간이 걸릴 수 있다.\n","lr = 0.0002  #학습에서 사용되는 learning rate. 논문에서는 0.0002\n","beta1 = 0.5  #Adam optimizer를 위한 하이퍼파라미터이다. 논문에서는 0.5\n","ngpu = 1 #가능한 gpu의 수. 이 값이 0이라면 CPU 모드에서 작동할 것이다. 0보다 더 큰 수일 경우, 숫자만큼의 GPU에서 작동할 것이다"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"x0jgOScENP0s"},"source":["!git clone https://github.com/woolia/j_image.git"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Er0IbSXaNP0u"},"source":["!ls"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"qI0Z_DpaZnmo"},"source":["# import libraries\n","\n","import torch\n","import torch.nn as nn\n","from torch.utils.data import Dataset\n","\n","import pandas, numpy, random\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"N-Xmoq-DZXhv"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FYKti2RmI8H8"},"source":["# We can use an image folder dataset the way we have it setup.\n","# Create the dataset\n","dataset = dset.ImageFolder(root=dataroot,\n","                           transform=transforms.Compose([\n","                               transforms.Resize(image_size),\n","                               transforms.CenterCrop(image_size),\n","                               transforms.ToTensor(),\n","                               transforms.Normalize((0.5, 0.5, 0.5), (0.5, 0.5, 0.5)),\n","                           ]))\n","# Create the dataloader\n","dataloader = torch.utils.data.DataLoader(dataset, batch_size=batch_size,\n","                                         shuffle=True, num_workers=workers)\n","\n","# Decide which device we want to run on\n","device = torch.device(\"cuda:0\" if (torch.cuda.is_available() and ngpu > 0) else \"cpu\")\n","\n","# Plot some training images\n","real_batch = next(iter(dataloader))\n","plt.figure(figsize=(8,8))\n","plt.axis(\"off\")\n","plt.title(\"Training Images\")\n","plt.imshow(np.transpose(vutils.make_grid(real_batch[0].to(device)[:64], padding=2, normalize=True).cpu(),(1,2,0)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EaF5zUfwI8Vs"},"source":["# custom weights initialization called on netG and netD\n","def weights_init(m):\n","    classname = m.__class__.__name__\n","    if classname.find('Conv') != -1:\n","        nn.init.normal_(m.weight.data, 0.0, 0.02)\n","    elif classname.find('BatchNorm') != -1:\n","        nn.init.normal_(m.weight.data, 1.0, 0.02)\n","        nn.init.constant_(m.bias.data, 0)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VQS-dFqEI8Xs"},"source":["# Generator Code\n","\n","class Generator(nn.Module):\n","    def __init__(self, ngpu):\n","        super(Generator, self).__init__()\n","        self.ngpu = ngpu\n","        self.main = nn.Sequential(\n","            # input is Z, going into a convolution\n","            nn.ConvTranspose2d( nz, ngf * 8, 4, 1, 0, bias=False),\n","            nn.BatchNorm2d(ngf * 8),\n","            nn.ReLU(True),\n","            # state size. (ngf*8) x 4 x 4\n","            nn.ConvTranspose2d(ngf * 8, ngf * 4, 4, 2, 1, bias=False),\n","            nn.BatchNorm2d(ngf * 4),\n","            nn.ReLU(True),\n","            # state size. (ngf*4) x 8 x 8\n","            nn.ConvTranspose2d( ngf * 4, ngf * 2, 4, 2, 1, bias=False),\n","            nn.BatchNorm2d(ngf * 2),\n","            nn.ReLU(True),\n","            # state size. (ngf*2) x 16 x 16\n","            nn.ConvTranspose2d( ngf * 2, ngf, 4, 2, 1, bias=False),\n","            nn.BatchNorm2d(ngf),\n","            nn.ReLU(True),\n","            # state size. (ngf) x 32 x 32\n","            nn.ConvTranspose2d( ngf, nc, 4, 2, 1, bias=False),\n","            nn.Tanh()\n","            # state size. (nc) x 64 x 64\n","        )\n","\n","    def forward(self, input):\n","        return self.main(input)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HUPcwBPYI8Zk"},"source":["netG = Generator(ngpu).to(device) \n","if (device.type=='cuda') and (ngpu>1): \n","    netG = nn.DataParallel(netG, list(range(ngpu)))\n","netG.apply(weights_init) \n","print(netG)\n","netG.to(\"cuda:0\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6-OK8OkYZOhx"},"source":["for name, param in netG.state_dict().items():\n","  print(\"Param shape: \", param.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"2YCM5oEWI8bc"},"source":["class Discriminator(nn.Module): \n","    def __init__(self,ngpu): \n","        super(Discriminator, self).__init__() \n","        self.ngpu = ngpu \n","        self.main = nn.Sequential( \n","            # input : nc * 64 * 64 \n","            nn.Conv2d(nc,ndf,4,2,1,bias=False), \n","            nn.LeakyReLU(0.2,inplace=True), \n","            # ndf * 32 * 32 \n","            nn.Conv2d(ndf,ndf*2,4,2,1,bias=False), \n","            nn.BatchNorm2d(ndf*2),\n","            nn.LeakyReLU(0.2,inplace=True), \n","            # (ndf*2) * 16 *16 \n","            nn.Conv2d(ndf*2,ndf*4,4,2,1,bias=False), \n","            nn.BatchNorm2d(ndf*4), \n","            nn.LeakyReLU(0.2,inplace=True), \n","            # (ndf*4)*8*8 \n","            nn.Conv2d(ndf*4,ndf*8,4,2,1,bias=False), \n","            nn.BatchNorm2d(ndf*8), \n","            nn.LeakyReLU(0.2,inplace=True), \n","            # (ndf*8)*4*4 \n","            nn.Conv2d(ndf*8,1,4,1,0,bias=False), \n","            nn.Sigmoid() ) \n","    def forward(self,input): \n","        return self.main(input)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6oTxskI4I8ed"},"source":["netD = Discriminator(ngpu)\n","\n","if (device.type == 'cuda') and (ngpu > 1): \n","    netD = nn.DataParallel(netD, list(range(ngpu))) \n","    print(net(D))\n","netD.apply(weights_init) \n","print(netD)\n","netD.to(\"cuda:0\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"fHJOP5wWPF_3"},"source":["# Initialize BCELoss function\n","criterion = nn.BCELoss()\n","\n","# Create batch of latent vectors that we will use to visualize\n","#  the progression of the generator\n","fixed_noise = torch.randn(64, nz, 1, 1, device=device)\n","\n","# Establish convention for real and fake labels during training\n","real_label = 1.\n","fake_label = 0.\n","\n","# Setup Adam optimizers for both G and D\n","optimizerD = optim.Adam(netD.parameters(), lr=lr, betas=(beta1, 0.999))\n","optimizerG = optim.Adam(netG.parameters(), lr=lr, betas=(beta1, 0.999))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NYpO_NaAW1Zo"},"source":["device"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eEw2kJroPGBI"},"source":["# Training Loop\n","\n","# Lists to keep track of progress\n","img_list = []\n","G_losses = []\n","D_losses = []\n","iters = 0\n","\n","print(\"Starting Training Loop...\")\n","# For each epoch\n","for epoch in range(num_epochs):\n","    # For each batch in the dataloader\n","    for i, data in enumerate(dataloader, 0):\n","\n","        ############################\n","        # (1) Update D network: maximize log(D(x)) + log(1 - D(G(z)))\n","        ###########################\n","        ## Train with all-real batch\n","        netD.zero_grad()\n","        # Format batch\n","        real_cpu = data[0].to(device)\n","        b_size = real_cpu.size(0)\n","        label = torch.full((b_size,), real_label, dtype=torch.float, device=device)\n","        # Forward pass real batch through D\n","        output = netD(real_cpu).view(-1)\n","        # Calculate loss on all-real batch\n","        errD_real = criterion(output, label)\n","        # Calculate gradients for D in backward pass\n","        errD_real.backward()\n","        D_x = output.mean().item()\n","\n","        ## Train with all-fake batch\n","        # Generate batch of latent vectors\n","        noise = torch.randn(b_size, nz, 1, 1, device=device)\n","        # Generate fake image batch with G\n","        fake = netG(noise)\n","        label.fill_(fake_label)\n","        # Classify all fake batch with D\n","        output = netD(fake.detach()).view(-1)\n","        # Calculate D's loss on the all-fake batch\n","        errD_fake = criterion(output, label)\n","        # Calculate the gradients for this batch, accumulated (summed) with previous gradients\n","        errD_fake.backward()\n","        D_G_z1 = output.mean().item()\n","        # Compute error of D as sum over the fake and the real batches\n","        errD = errD_real + errD_fake\n","        # Update D\n","        optimizerD.step()\n","\n","        ############################\n","        # (2) Update G network: maximize log(D(G(z)))\n","        ###########################\n","        netG.zero_grad()\n","        label.fill_(real_label)  # fake labels are real for generator cost\n","        # Since we just updated D, perform another forward pass of all-fake batch through D\n","        output = netD(fake).view(-1)\n","        # Calculate G's loss based on this output\n","        errG = criterion(output, label)\n","        # Calculate gradients for G\n","        errG.backward()\n","        D_G_z2 = output.mean().item()\n","        # Update G\n","        optimizerG.step()\n","\n","        # Output training stats\n","        if i % 50 == 0:\n","            print('[%d/%d][%d/%d]\\tLoss_D: %.4f\\tLoss_G: %.4f\\tD(x): %.4f\\tD(G(z)): %.4f / %.4f'\n","                  % (epoch, num_epochs, i, len(dataloader),\n","                     errD.item(), errG.item(), D_x, D_G_z1, D_G_z2))\n","\n","        # Save Losses for plotting later\n","        G_losses.append(errG.item())\n","        D_losses.append(errD.item())\n","\n","        # Check how the generator is doing by saving G's output on fixed_noise\n","        if (iters % 500 == 0) or ((epoch == num_epochs-1) and (i == len(dataloader)-1)):\n","            with torch.no_grad():\n","                fake = netG(fixed_noise).detach().cpu()\n","            img_list.append(vutils.make_grid(fake, padding=2, normalize=True))\n","\n","        iters += 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"eXn1Y6XaPGD-"},"source":["plt.figure(figsize=(10,5))\n","plt.title(\"Generator and Discriminator Loss During Training\")\n","plt.plot(G_losses,label=\"G\")\n","plt.plot(D_losses,label=\"D\")\n","plt.xlabel(\"iterations\")\n","plt.ylabel(\"Loss\")\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"oVecOXzWPGF7"},"source":["fig = plt.figure(figsize=(8,8))\n","plt.axis(\"off\")\n","ims = [[plt.imshow(np.transpose(i,(1,2,0)), animated=True)] for i in img_list]\n","ani = animation.ArtistAnimation(fig, ims, interval=1000, repeat_delay=1000, blit=True)\n","\n","HTML(ani.to_jshtml())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Hhx_8LSP-60i"},"source":["img_list[-1][:50].shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gEnm6QbDPGHw"},"source":["# Grab a batch of real images from the dataloader\n","real_batch = next(iter(dataloader))\n","\n","# Plot the real images\n","plt.figure(figsize=(30,30))\n","\n","# Plot the fake images from the last epoch\n","plt.subplot(1,2,1)\n","plt.axis(\"off\")\n","plt.title(\"Fake Images\")\n","plt.imshow(np.transpose(img_list[-1][:],(1,2,0)))\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_VU7HNA5SVOH"},"source":["plt.figure(figsize=(30,30))\n","plt.subplot(1,2,1)\n","plt.axis(\"on\")\n","plt.title(\"Real Images\")\n","plt.imshow(np.transpose(vutils.make_grid(real_batch[0].to(device)[:64], padding=5, normalize=True).cpu(),(1,2,0)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ihx4QhkRDXD7"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tysZmMBl8xl5"},"source":["img_list[0].shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UA-Pmpez_Pl6"},"source":[""],"execution_count":null,"outputs":[]}]}